@inherits Umbraco.Cms.Web.Common.Views.UmbracoViewPage
@using Umbraco.Cms.Web.Common.Models
@using Umbraco.Cms.Web.Common.Security
@using Umbraco.Cms.Web.Website.Controllers
@using Microsoft.AspNetCore.Mvc.TagHelpers
@inject IMemberExternalLoginProviders memberExternalLoginProviders
@{
	Layout = null;
    var loginModel = new LoginModel {
        RedirectUrl = Context.Request.Query["ReturnUrl"]
    };
}
<html lang="en">
<head>
	<title>Login demo</title>
	<style>
		body {
			background-color: #a9c8ec;
			font-family: sans-serif;
			padding: 2rem;
		}
		label {
			display: block;
			margin-bottom: 0.5rem;
		}
		input, button {
			padding:  0.5rem;
			font-size: 1rem;
			margin-bottom: 1.5rem;
			width: 20rem;
		}
	</style>
</head>
<body>
<h1>Welcome, friend 🥰</h1>
@using (Html.BeginUmbracoForm<UmbLoginController>("HandleLogin", new { RedirectUrl = loginModel.RedirectUrl }))
{
	<div asp-validation-summary="ModelOnly"></div>
	<div>
		<label asp-for="@loginModel.Username">What's your user name?</label>
		<input asp-for="@loginModel.Username" value="umbracian@member"/>
	</div>
	<div>
		<label asp-for="@loginModel.Password">What's your password?</label>
		<input asp-for="@loginModel.Password" value="ItIsSecret"/>
	</div>

	<button type="submit">Log in</button>
}

@{
    var loginProviders = await memberExternalLoginProviders.GetMemberProvidersAsync();
    var externalSignInError = ViewData.GetExternalSignInProviderErrors();

    if (loginProviders.Any())
    {
        <hr/>
        <h4>Or using external providers</h4>
        if (externalSignInError?.AuthenticationType is null && externalSignInError?.Errors.Any() == true)
        {
            @Html.DisplayFor(x => externalSignInError.Errors);
        }

        @foreach (var login in await memberExternalLoginProviders.GetMemberProvidersAsync())
        {

            @using (Html.BeginUmbracoForm<UmbExternalLoginController>(nameof(UmbExternalLoginController.ExternalLogin)))
            {
                <button type="submit" name="provider" value="@login.ExternalLoginProvider.AuthenticationType">
                    Sign in with @login.AuthenticationScheme.DisplayName
                </button>

                if (externalSignInError?.AuthenticationType == login.ExternalLoginProvider.AuthenticationType)
                {
                    @Html.DisplayFor(x => externalSignInError.Errors);
                }
            }
        }
    }
}

</body>
</html>